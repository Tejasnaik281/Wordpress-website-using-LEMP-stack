name: Deploy WordPress

on:
  push:
    branches:
      - master  # Trigger workflow on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-22.04

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up SSH
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.KEY_FOR_LEMP }}

      # Step 3: Install AWS CLI
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      # Step 4: Retrieve the GitHub Runner's Public IP
      - name: Get Runner's Public IP
        id: get_ip
        run: |
          PUBLIC_IP=$(curl -s https://checkip.amazonaws.com)
          echo "Public IP: $PUBLIC_IP"
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      # Step 5: Update Security Group with Runner's Public IP
      - name: Update Bastion Security Group
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
        run: |
          # Get the current public IP
          PUBLIC_IP=$PUBLIC_IP
          echo "Adding $PUBLIC_IP to security group $SECURITY_GROUP_ID"

          # Add ingress rule for the runner's IP
          aws ec2 authorize-security-group-ingress \
            --group-id $SECURITY_GROUP_ID \
            --protocol tcp \
            --port 22 \
            --cidr "$PUBLIC_IP/32"


      # Step 6: Deploy files to VPS
      
      - name: Deploy WordPress Files
        env:
          EC2_USER: ${{ secrets.VPS_USER }}
          BASTION_HOST: ${{ secrets.BASTION_HOST }}
          PRIVATE_EC2: ${{ secrets.VPS_HOST }}
          WORDPRESS_DIR: ${{ secrets.VPS_WORDPRESS_DIR }}
          PEM_KEY: ${{ secrets.KEY_FOR_LEMP }}

          # echo "Deploying WordPress files to $PRIVATE_EC2 via Bastion Host $BASTION_HOST"
          # # Sync files via Bastion Host
          # rsync -e "ssh -o ProxyCommand='ssh -W %h:%p $EC2_USER@$BASTION_HOST'" -avz --delete \
          #  ./ $EC2_USER@$PRIVATE_EC2:$WORDPRESS_DIR
          
          # rsync -e "ssh -o ProxyCommand='ssh -i $PEM_KEY $EC2_USER@$BASTION_HOST'"
        run:
          echo "Deploying WordPress files to $PRIVATE_EC2 via Bastion Host $BASTION_HOST"
          rsync -e "ssh -i $PEM_KEY -o ProxyCommand='ssh -i $PEM_KEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $EC2_USER@$BASTION_HOST -W %h:%p'" \
            -avz --delete \
            --exclude '.git/' \
            --exclude 'wp-config.php' \
            --exclude 'wp-content/uploads' \
            --include 'deployment/deploy.sh' \
            --include 'deployment/setup.sh' \
            --include 'fetch_data.php' \
            --exclude '*' \

            ./ $EC2_USER@$PRIVATE_EC2:$WORDPRESS_DIR && \
          # Explicitly Copy fetch_data.php (if not already included via rsync)
          scp -i $PEM_KEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyCommand="ssh -i $PEM_KEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -W %h:%p $EC2_USER@$BASTION_HOST" \
          fetch_data.php $EC2_USER@$PRIVATE_EC2:$WORDPRESS_DIR
          
          # Reload Nginx to Apply Changes
          ssh -i $PEM_KEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyCommand="ssh -i $PEM_KEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -W %h:%p $EC2_USER@$BASTION_HOST" \
          $EC2_USER@$PRIVATE_EC2 "sudo systemctl reload nginx"
          
          # # Create SSH configuration for bastion host
          # echo "Host bastion
          # HostName $BASTION_HOST
          # User $EC2_USER
          # IdentityFile ~/.ssh/id_rsa" > ~/.ssh/config

          # # Proxy through bastion host to access private VPS
          # echo "Host vps
          # HostName $VPS_PRIVATE_IP
          # User $VPS_USER
          # ProxyJump bastion
          # IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config

          # chmod 600 ~/.ssh/config


          # rsync -avz --delete \
          #   --exclude '.git/' \
          #   --exclude 'wp-config.php' \
          #   --exclude 'wp-content/uploads' \
          #   ./ $EC2_USER@$BASTION_HOST:$WORDPRESS_DIR

        

      # Step 7: Reload the web server (optional)
      # - name: Reload Nginx
      #   run: |
      #     ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "sudo systemctl reload nginx"
      # - name: Reload Nginx on Private Server via Bastion Host
      #   env:
      #     EC2_USER: ${{ secrets.VPS_USER }}
      #     BASTION_HOST: ${{ secrets.BASTION_HOST }}
      #     PRIVATE_EC2: ${{ secrets.VPS_HOST }}
      #     WORDPRESS_DIR: ${{ secrets.VPS_WORDPRESS_DIR }}
      #     PEM_KEY: ${{ secrets.KEY_FOR_LEMP }}
      #   run: |
      #     ssh -i $PEM_KEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
      #     -o ProxyCommand='ssh -i $PEM_KEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $EC2_USER@$BASTION_HOST -W %h:%p' \
      #     $EC2_USER@$PRIVATE_EC2 "sudo systemctl reload nginx"


      # Notify success
      - name: Notify Deployment Success
        run: echo "WordPress deployment complete!"

      # Step 8: Remove IP from Security Group (Optional)
      - name: Remove IP from Security Group
        if: always() # Ensure this step runs regardless of the outcome of previous steps
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
        run: |
          echo "Removing $PUBLIC_IP from security group $SECURITY_GROUP_ID"

          # Remove ingress rule for the runner's IP
          aws ec2 revoke-security-group-ingress \
            --group-id $SECURITY_GROUP_ID \
            --protocol tcp \
            --port 22 \
            --cidr "$PUBLIC_IP/32"
##*
